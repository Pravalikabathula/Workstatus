package com.rgt.workstatus.Controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.rgt.workstatus.Domain.Employee;
import com.rgt.workstatus.Repository.EmployeeRepository;
import com.rgt.workstatus.Service.EmployeeService;
import com.rgt.workstatus.Util.Response;

@RestController
@RequestMapping(value = "/employee")
public class EmployeeController {

	@Autowired
	private EmployeeService employeeService;

	@Autowired
	EmployeeRepository employeeRepository;

	private final static Logger logger = LoggerFactory.getLogger(EmployeeController.class);
	Response response = new Response();

//	@InitBinder
//	public void initBinder(WebDataBinder dataBinder) {
//		StringTrimmerEditor stringtiTrimmerEditor = new StringTrimmerEditor(true);
//		dataBinder.registerCustomEditor(String.class, stringtiTrimmerEditor);
//	}

//	@GetMapping("/getall")
//	public List<Employee> getAllEmployes(@RequestParam(value = "pageNumber", required = false) Integer offset,
//			@RequestParam(value = "limit", required = false) Integer limit, @RequestParam(value = "id") String sort) {
//		return employeeService.getAllEmployeesDetails(offset, limit, "id");
//
//	}
//	

	@GetMapping(value = "/all")
	public @ResponseBody List<Employee> getAllEmployes(
			@RequestParam(value = "pageNumber", required = false) Integer offset,
			@RequestParam(value = "limit", required = false) Integer limit) {
		logger.debug("getAllEmployes: INVOKED");
		return employeeService.getAllEmployeesDetails(offset, limit);

	}

	/*
	 * @PostMapping(value = "/testsave") public com.rgt.workstatus.Entity.Employee
	 * testsave(@RequestBody Employee employee) {// , BindingResult bindingResult) {
	 * System.out.println(employee.getDepartment());
	 * 
	 * // com.rgt.workstatus.Entity.Employee employeeEntity= new
	 * com.rgt.workstatus.Entity.Employee(); // DepartmentEntity dept = new
	 * DepartmentEntity(); // // Objectcopier.copyObject(employee, employeeEntity);
	 * // Objectcopier.copyObject(employee.getDepartment(), dept); //
	 * employeeEntity.setDepartment(dept);
	 * 
	 * ModelMapper me = new ModelMapper(); com.rgt.workstatus.Entity.Employee
	 * employeeEntity=me.map(employee,com.rgt.workstatus.Entity.Employee.class);
	 * 
	 * 
	 * 
	 * return employeeRepository.save(employeeEntity); }
	 */
	@PostMapping(value = "/create")
	public Response createEmployee(@RequestBody Employee employee) {// , BindingResult bindingResult) {
		// System.out.println(employee.getDepartment());
		try {

			/*
			 * if (bindingResult.hasErrors()) {
			 * response.setMsg("Enter Details With out White Spaces"); return response; }
			 * else {
			 */
			Employee emp = employeeService.saveEmployeeDetails(employee);
			if (emp != null) {
				response.setStatus(true);
				response.setMsg("Employee detailed saved !!");
			}
			// }
		} catch (IllegalArgumentException e) {
			response.setStatus(false);
			response.setMsg(e.getMessage());
		}
		return response;
	}

//	@PostMapping(value = "/create")
//	public Response createEmployee(@Validated @RequestBody Employee employee, BindingResult bindingResult) {
//
//		try {
//
//			if (bindingResult.hasErrors()) {
//				response.setMsg("Enter Details With out White Spaces");
//				return response;
//			} else {
//				Employee emp = employeeService.saveEmployeeDetails(employee);
//				if (emp != null) {
//					response.setStatus(true);
//					response.setMsg("Employee detailed saved !!");
//				}
//			}
//		} catch (IllegalArgumentException e) {
//			response.setStatus(false);
//			response.setMsg(e.getMessage());
//		}
//
//		if (employee != null) {
//			try {
//				employeeService.saveEmployeeDetails(employee);
//				response.setStatus(false);
//				response.setMsg("Saved details");
//			} catch (Exception e) {
//				response.setStatus(false);
//				response.setMsg(e.getMessage());
//			}
//		}
//		return response;
//	}
//
//	@GetMapping(value = "/getBy/{employeeId}")
//	Employee getEmployeeById(@PathVariable Integer employeeId) {
//		return employeeService.getById(employeeId);
//	}

	@GetMapping(value = "/search/{search}")
	public List<Employee> getEmployeeBySearch(@PathVariable(value = "search") String search) {
		return employeeService.searchByEmployee(search);
	}

	@PutMapping(value = "/update")
	public @ResponseBody Response updateEmployee(@RequestBody Employee employee) {
		Employee byId = employeeService.getById(employee.getEmployeeId());
		try {
			if (byId != null) {
				employeeService.updateEmployeeProfile(employee);
				response.setStatus(true);
				response.setMsg("Employee details updated !!");
			}
		} catch (IllegalArgumentException e) {
			response.setStatus(false);
			response.setMsg(e.getMessage());
		}
		return response;
	}

	@DeleteMapping(value = "/delete/{employeeId}")
	public @ResponseBody Response deleteEmployee(@PathVariable("employeeId") Integer employeeId,
			HttpServletRequest request) {
		logger.debug("delete Employee Details:INVOKED");
		Boolean value = false;
		try {
			if ((employeeId != 0) && (employeeId != null)) {
				value = employeeService.deleteEmployeeById(employeeId);
				if (value == true) {
					response.setStatus(false);
					response.setMsg("Employee deleted successfully!.");
				}
			}
		} catch (IllegalArgumentException e) {
			logger.error(e.getMessage());
			response.setStatus(false);
			response.setMsg(e.getMessage());
		} catch (Exception ex) {
			logger.error(ex.getMessage());
			response.setStatus(false);
			response.setMsg(ex.getMessage());
		}
		return response;
	}

}